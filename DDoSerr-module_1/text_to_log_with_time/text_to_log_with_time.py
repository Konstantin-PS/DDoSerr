#Этот модуль через секунду пишет в файл 'log.txt' 
#заданное в конфиге количество строк (по умолчанию 60) 
#с заданным содержимым (по умолчанию "КуЪ") 
#в столбик c датой и временем их создания.
#Если файла нет, то создаёт.

#!/usr/bin/python				#Путь к интерпретатору питона (может работать и без этого).
# -*- coding: utf-8 -*- 		#Выбор кодировки (без него не работает). 
								#Именно так надо писать, с октоторпом в начале и всем остальным.

import time						#Подключаем модуль времени.
from datetime import datetime	#Подключаем модуль даты и времени (частично).
import configparser				#подключаем парсер конфига.


log = open('log.txt', 'w')		#Открываем файл лога (для записи с перезаписью).
#Ключи для команды открытия файла: 'r' - чтение; 
#'w' - запись с перезаписью и созданием файла, если его нет; 
#'x' - запись, если нет файла, иначе исключение; 
#'a' - дозапись; 'b' - двоичный режим; 
#'t' - текстовый режим (по умолчанию); '+' - чтение и запись. 
#Ключи можно комбинировать.


#Механизм чтения конфига, поиска нужных значений и присваивания значений пременных. 
config = configparser.ConfigParser()
config.read("config.ini")				#Считываем конфиг (имя в скобках)

#Читаем значения из конфига.
repeat_conf = config.get("Settings", "Repeat")
pause_conf = config.get("Settings", "Pause")
message_conf = config.get("Settings", "Message")

#Переводим значения переменных в правильные.
repeat = int(repeat_conf)	#Переводим в int.
pause = float(pause_conf)	#Переводим в float.
message = message_conf.encode('utf-8')	#Используем кодировку с поддержкой Русского.


#Заголовки таблицы.
log.write("Сообщение"+'\t'+'\t'+"Время и дата"+'\n')

#Для повтора чего-либо n раз можно использовать 'range(n)'.
for _ in range(repeat):			#Цикл на 60 повторов (по умолчанию). Тело цикла под табуляцией, до time.sleep().
	log.write(message+'\t'+'\t'+'\t')		#Пишем строчку в файл лога.		
								#Функция(и), которую(ые) надо выполнять не раньше, чем через секунду 60 раз (по умолчанию). 
								#Выполняются до sleep. '\n' - новая строка, '\t' - табуляция.
	#log.write(datetime.now().ctime() + '\n')		#Добавляем дату и время. Не очень красиво.
	log.write(str(datetime.now().strftime('%H:%M:%S - %d.%m.%Y.')) + '\n')		#Добавляем дату и время в приятном виде.
	
	log.flush()					#Скидываем внутренний буфер, чтобы при падении программы лог сохранился.
	
	time.sleep(pause)			#Ждём секунду перед завершением итерации цикла. Повторяем выполнение тела цикла.
								#Для правильной работы цикла перед time.sleep() должен быть отступ.

log.close()						#Закрываем файл лога.
