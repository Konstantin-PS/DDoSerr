#!/usr/bin/python3
#Путь к интерпретатору пайтона.
# -*- coding: utf-8 -*-
#Выбор кодировки (без него не работает русский язык).

"""
Модуль логгирования HTTP-запросов для DDoSerr. 
v.1.4.2. от 04.07.2018.

Этот модуль считывает и, при необходимости, переопределяет настройки,
запускает модуль HTTP-запросов и логгирует ответы.

В данной конфигурации логгер с модулем запросов работают с 
максимальной скоростью 2 лога/с. Очень мало.
"""

#Подключаем модуль времени.
import time
#Подключаем модуль даты и времени (частично).
from datetime import datetime
#Подключаем парсер конфига.
import configparser
#Подключаем свой модуль запросов.
import http_requests
	

#Функция загрузки настроек из файла конфигурации.
def config_func():
	#Механизм чтения конфига, поиска нужных значений 
	#и присваивания значений пременным. 
	config = configparser.ConfigParser()
	#Считываем конфиг (имя файла в скобках).
	config.read("config.ini")

	#Читаем значения из конфига.
	repeat_conf = config.get("Settings", "Repeat")
	pause_conf = config.get("Settings", "Pause")
	
	#Определяем переменные как нелокальные, чтобы к ним был доступ 
	#за пределами этой функции.
	#nonlocal repeat, pause
	
	#Переводим значения переменных в правильные.
	#Переводим в int.
	repeat = int(repeat_conf)
	#Переводим в float.
	pause = float(pause_conf)
	
	return(repeat, pause)

#Ввод одноразовых настроек из консоли с переопределением переменных.
#!Надо переделать под ключи командной строки! 
def input_func(repeat, pause):
	#Запрос на переопределение настроек и ввод с клавиатуры.
	switch = input("Хотите ли Вы однократно переопределить заданные в конфиг-файле настройки программы?"+\
		'\n'+"Да - 'y', Нет - 'n'."+'\n'+\
		"Ваш выбор: ")
	if switch == "y":
		print("Введите свои параметры.")
		#Переопределение настроек.
		repeat_user = input("Введите количество повторов: ")
		repeat = int(repeat_user)
		pause_user = input("Введите длительность паузы (секунд): ")
		pause = float(pause_user)
		print("Вы ввели: (количество повторов, задержка в секундах)")
		print(repeat, pause)	
		return(repeat, pause)
	if switch == "n":
		print("Используются настройки из файла конфигурации.")
		return(repeat, pause)

#Функция для написания лога.
def log_func(repeat, pause):
	#Открываем файл лога (для записи с перезаписью).
	#Если такого файла нет, то создаётся.
	log = open('log.txt', 'w')

#Ключи для команды открытия файла: 'r' - чтение; 
#'w' - запись с перезаписью и созданием файла, если его нет; 
#'x' - запись, если нет файла, иначе исключение; 
#'a' - дозапись; 'b' - двоичный режим; 
#'t' - текстовый режим (по умолчанию); '+' - чтение и запись. 
#Ключи можно комбинировать.
								
	print("Выполняется запись лога. Пожалуйста, подождите.")
	
	#Заголовки таблицы.
	log.write("Ответ"+'\t'+'\t'+'\t'+'\t'+'\t'+"|"+'\t'+"Время и дата"+'\n')

	#Для повтора чего-либо n раз можно использовать 'range(n)'.
	#Цикл на 60 повторов (по умолчанию). 
	#Тело цикла под табуляцией, до time.sleep().

	for _ in range(repeat):
		"""
		Вызов функции из модуля запросов.
		"""
		#Надо её отсюда убрать и сделать функцию универсальной.
		status, head = http_requests.http_connection()
		#Перевод из int в строку.
		status = str(status)
		
		#Пишем ответ в файл лога.
		log.write(status +'\t'+ head +'\t'+"|"+'\t')		
			#Функция(и), которую(ые) надо выполнять не раньше, 
			#чем через секунду 60 раз (по умолчанию). 
			#Выполняются до sleep. '\n' - новая строка, '\t' - табуляция.
		
		#Добавляем дату и время в приятном виде.
		log.write(str(datetime.now().strftime('%H:%M:%S - %d.%m.%Y.')) + '\n')
		
		#Скидываем внутренний буфер, чтобы при падении программы лог сохранился.
		log.flush()
	
		#Ждём секунду перед завершением итерации цикла (по умолчанию). 
		#Повторяем выполнение тела цикла.
		#Для правильной работы цикла перед time.sleep() должен быть отступ.
		time.sleep(pause)
	#Закрываем файл лога.
	log.close()


#Запуск функции main только при запуске этого модуля, но не при импорте.
if __name__ == "__main__":
	#Загрузка настроек из фала конфигурации с сохранением в переменную.
	cfg=config_func()
	#Вызов функции ввода.
	input_func(repeat, pause)
	#Вызов функции логгирования.
	log_func(repeat, pause)
